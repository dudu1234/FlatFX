@model FlatFXWebClient.ViewModels.OrderViewModel
@using FlatFXCore.BussinessLayer;
@using FlatFXCore.Model.Data;


@Html.HiddenFor(model => model.InvalidAccountReason)
@if (Model.InvalidAccountReason != null && Model.InvalidAccountReason.Count > 0)
{
    <div class="start-align">
        <h3>@FlatFXResources.Resources.OrderNotAllowed:</h3><br />
        @if (Model.InvalidAccountReason != null)
        {
            foreach (string reason in Model.InvalidAccountReason)
            {
                string reason2 = " - " + reason;
                string[] list = reason2.Split('\n');
                foreach (string r in list)
                {
                    if (r.Contains("Currency Exchange is not available") || r.Contains("Office Hours"))
                    {
                        @Html.Raw(FlatFXResources.Resources.TradingHours)
                        break;
                    }
                    else if (r != "")
                    {
                        <h4>@r</h4>
                    }
                }

            }
        }
    </div>
}
else
{
    @Html.HiddenFor(model => model.EnsureOnLinePrice)
    @Html.HiddenFor(model => model.PvPEnabled)
    <div class="simple-trading-order">
        @if (!Model.IsEdit && Model.MatchOrderId <= 0)
        {
            <div class="form-group">
                <remark class="control-label col-xs-12">
                    @Html.Raw(FlatFXResources.Resources.OrderRemark)
                </remark>
            </div>
        }
        <div class="form-group">
            <label class="control-label col-xs-5">@FlatFXResources.Resources.OrderChooseCurrencyPair:</label>
            <div class="col-xs-7">
                @Html.DropDownListFor(m => m.Symbol, new SelectList(CurrencyManager.Instance.PairsListByCulture(ApplicationInformation.Instance.IsDemoUser),
                    "Key", "Value"), htmlAttributes: new { ng_model = "Symbol", ng_change = "setAction()", @class = "form-control" })
            </div>
        </div>
        <div class="form-group small-line" ng-click="updateAction()">
            <label class="control-label col-xs-5 label-down">@FlatFXResources.Resources.SmplTradeOrderWishTo</label>
            <div class="col-xs-7 order-radio-div">
                @Html.RadioButtonFor(model => model.BuySell, "Buy", new { @checked = "checked" })
                <span>@FlatFXResources.Resources.Buy2 {{ CCY1() }} @FlatFXResources.Resources.Sell2 {{ CCY2() }}</span>
                <br />
                @Html.RadioButtonFor(model => model.BuySell, "Sell")
                <span>@FlatFXResources.Resources.Buy2 {{ CCY2() }} @FlatFXResources.Resources.Sell2 {{ CCY1() }}</span>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-xs-5">@FlatFXResources.Resources.SelectAmount:</label>
            <div class="col-xs-7">
                <div class="input-group">
                    <span class="input-group-addon large-font">{{ CCY1Sign }}</span>
                    <input autofocus type="number" id="AmountCCY1" name="AmountCCY1" data_ng_model="amountCcy1" class="form-control amount-input" ng-change="setAction()" />
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-5">
                <label class="control-label">
                    <input class="control-label" name="showMinimalPartnerExecutionAmount" type="checkbox" ng-model="minimalPartnerExecutionAmountChkModel" ng-change="minimalPartnerCheckboxEvent(minimalPartnerExecutionAmountChkModel)" /> @FlatFXResources.Resources.MinimalPartnerExecutionAmount (<u class="site-color1">{{ CCY1() }}</u>):
                </label>
            </div>
            <div class="col-xs-7">
                @Html.EditorFor(model => model.MinimalPartnerExecutionAmountCCY1, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                @Html.ValidationMessageFor(m => m.MinimalPartnerExecutionAmountCCY1, "", new { @class = "text-danger" })
                <label name="AllAmount" id="AllAmount" class="control-label">@FlatFXResources.Resources.AllAmount</label>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-xs-5">@FlatFXResources.Resources.ActionDescription:</label>
            <div class="col-xs-7">
                <label class="control-label order-action-description">{{ actionDescription }}</label>
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-5">
                <label class="control-label">
                    <input class="control-label" name="showExpiryDate" type="checkbox" ng-model="expiryDateChkModel" ng-change="expiryDateCheckboxEvent(expiryDateChkModel)" /> @FlatFXResources.Resources.ExpiryDate:
                </label>
            </div>
            <div class="col-xs-7">
                <div class="input-group direction-ltr" id="ExpiryDateDiv">
                    <input type="datetime-local" name="ExpiryDate" id="ExpiryDate" ng-model="ExpiryDateModel" placeholder="Please enter expiry date" />
                </div>
                <label name="GTC" id="GTC" class="control-label">Good Till Cancel</label>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-xs-5">@FlatFXResources.Resources.ClearingType</label>
            <div class="col-xs-7">
                <select id="ClearingType" name="ClearingType" class="form-control" ng-model="ClearingTypeModel">
                    <option ng-selected="ClearingTypeModel == -1" value="-1">@FlatFXResources.Resources.Select</option>
                    <option ng-selected="ClearingTypeModel == 0" value="0">@FlatFXResources.Resources.SameDay</option>
                    <option ng-selected="ClearingTypeModel == 1" value="1">@FlatFXResources.Resources.BussinessDay1</option>
                    <option ng-selected="ClearingTypeModel == 2" value="2">@FlatFXResources.Resources.BussinessDay2</option>
                    <option ng-selected="ClearingTypeModel == 5" value="5">@FlatFXResources.Resources.BussinessDay5</option>
                </select>
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-5">
                <label class="control-label">
                    <input class="control-label" name="showRateRange" type="checkbox" ng-model="rateRangeChkModel" ng-change="rateRangeCheckboxEvent(rateRangeChkModel)" /> @FlatFXResources.Resources.RateRange:
                </label>
            </div>
            <div class="col-xs-7">
                <div id="rateRangeDiv" ng-show="minRateModel > 0 || maxRateModel > 0">
                    <div class="col-xs-12">
                        <label class="control-label col-xs-1">@FlatFXResources.Resources.Min</label>
                        <div class="col-xs-11">
                            <input type="number" name="MinRate" id="MinRate" ng-model="minRateModel" class="form-control" placeholder="Min rate" step="0.0001" />
                        </div>
                    </div>
                    <div class="col-xs-12">
                        <label class="control-label col-xs-1">@FlatFXResources.Resources.Max</label>
                        <div class="col-xs-11">
                            <input type="number" name="MaxRate" id="MaxRate" ng-model="maxRateModel" class="form-control" placeholder="Max rate" step="0.0001" />
                        </div>
                    </div>
                </div>
                <div id="rateRangeDiv" ng-show="minRateModel == null && maxRateModel == null" class="start-align">
                    <label>-</label>
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SelectedAccount, htmlAttributes: new { @class = "control-label col-xs-5" })
            <div class="col-xs-7">
                @Html.DropDownListFor(model => model.SelectedAccount, Model.UserBankAccounts, htmlAttributes: new { @readonly = "readonly", @class = "form-control" })
            </div>
        </div>
        @*<div class="form-group">
                <div class="col-xs-12 start-align">
                    @Html.CheckBoxFor(m => m.EnsureOnLinePrice, new { htmlAttributes = new { @class = "form-control" } }) @FlatFXResources.Resources.EnsureOnLinePrice, @FlatFXResources.Resources.ExtraChargeOf @(CurrencyManager.ExtraCharge_EnsureOnLinePrice * 100)%
                    <span ng-model="showEnsureOnLinePrice" ng-click="showEnsureOnLinePrice = !showEnsureOnLinePrice" class="more-details"> @FlatFXResources.Resources.MoreDetails</span>
                    <div ng-show="showEnsureOnLinePrice" class="descriptionDiv">
                        @Html.Raw(FlatFXResources.Resources.EnsureOnLinePriceDetails)
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-12 start-align">
                    @Html.CheckBoxFor(m => m.PvPEnabled, new { htmlAttributes = new { @class = "form-control" } }) @FlatFXResources.Resources.PvPEnabled, @FlatFXResources.Resources.ExtraChargeOf @(CurrencyManager.ExtraCharge_PvPEnabled * 100)%
                    <span ng-model="showPvPEnabled" ng-click="showPvPEnabled = !showPvPEnabled" class="more-details"> @FlatFXResources.Resources.MoreDetails</span>
                    <div ng-show="showPvPEnabled" class="descriptionDiv">
                        @Html.Raw(FlatFXResources.Resources.PvPEnabledDetails)
                    </div>
                </div>
            </div>*@
        <div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-xs-5" })
            <div class="col-xs-7">
                @Html.TextAreaFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group">
            <span class="start-align col-xs-12">
                <b class="site-color1">@FlatFXResources.Resources.YourSaving {{ getCustomerSaving() | number:0 }} {{ CCY1() }} @FlatFXResources.Resources.Estimation</b><br />
                @FlatFXResources.Resources.BankSpreadIs
            </span>
        </div>

        <div class="form-group">
            <div class="text-center col-xs-12">
                @if (ApplicationInformation.Instance.IsDemoUser)
                {
                    <input type="submit" value="@FlatFXResources.Resources.OrderSubmitDemo" class="btn btn-primary" />
                }
                else
                {
                    <input type="submit" value="@FlatFXResources.Resources.OrderSubmit1" class="btn btn-primary" />
                }
            </div>
        </div>
    </div>
}