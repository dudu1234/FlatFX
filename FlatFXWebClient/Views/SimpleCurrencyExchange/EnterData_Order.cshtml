@model FlatFXWebClient.ViewModels.SimpleCurrencyExchangeViewModel
@using FlatFXCore.BussinessLayer;

@{
    string disableClass = "";
    if (Model.WorkflowStage > 1)
    {
        disableClass = "disabled";
    }
}
<div class="panel-danger form-horizontal simple-trading-order">
    <div class="panel-heading">
        <h3 class="panel-title">@FlatFXResources.Resources.SmplTradeOrderHeader</h3>
    </div>
    <div class="panel-body @disableClass">

        @Html.HiddenFor(model => model.InvalidAccountReason)
        @if (Model.InvalidAccountReason != null && Model.InvalidAccountReason.Count > 0)
        {
            <div class="start-align">
                <h3>@FlatFXResources.Resources.SmplTradeOrderNotAllowed:</h3><br />
                @foreach (string reason in Model.InvalidAccountReason)
                {
                    string reason2 = " - " + reason;
                    string[] list = reason2.Split('\n');
                    foreach (string r in list)
                    {
                        if (r != "")
                        {
                            <h4>@r</h4>
                        }
                    }

                }
            </div>
        }
        else
        {
            if (Model.Comment != null)
            {
                <div>
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                </div>
            }
            <div class="form-group">
                <label class="control-label col-md-3">@FlatFXResources.Resources.SmplTradeOrderWishTo</label>
                <div class="col-md-3 order-radio-div">
                    @Html.RadioButtonFor(model => model.BuySell, "Buy", new { @checked = "checked", onclick = "setBuySellText('" + @FlatFXResources.Resources.BySelling + "')" })
                    <span>@FlatFXResources.Resources.Buy</span>
                </div>
                <div class="col-md-3 order-radio-div">
                    @Html.RadioButtonFor(model => model.BuySell, "Sell", new { onclick = "setBuySellText('" + @FlatFXResources.Resources.ByBuying + "')" })
                    <span>@FlatFXResources.Resources.Sell</span>
                </div>
                <div class="col-md-3"></div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-3">@FlatFXResources.Resources.OfCurrency</label>
                <div class="col-md-4">
                    @Html.DropDownListFor(m => m.CCY1, new SelectList(CurrencyManager.Instance.CurrencyListByCulture, "Key", "Value"), htmlAttributes: new { ng_model = "CCY1", ng_change = "changeCCY1()", @class = "form-control" })
                </div>
                <label class="control-label col-md-2">@FlatFXResources.Resources.InAmount</label>
                <div class="col-md-3 input-group">
                    <span class="input-group-addon large-font">{{ CCY1Sign }}</span>
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", type = "number" } })
                </div>
            </div>
            <div class="form-group">
                <label id="buySellText" class="control-label col-md-3">@FlatFXResources.Resources.BySelling</label>
                <div class="col-md-4">
                    @Html.DropDownListFor(m => m.CCY2, new SelectList(CurrencyManager.Instance.CurrencyListByCulture, "Key", "Value"), htmlAttributes: new { @class = "form-control" })
                </div>
                <div class="col-md-5">
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SelectedAccount, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.DropDownListFor(model => model.SelectedAccount, Model.UserBankAccounts, htmlAttributes: new { @readonly = "readonly", @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.TextAreaFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                <div class="text-center col-md-12">
                    @if (ApplicationInformation.Instance.IsDemoUser)
                    {
                        <input type="submit" value="@FlatFXResources.Resources.SmplTradeOrderSubmitDemo" class="btn btn-primary" />
                    }
                    else
                    {
                        <input type="submit" value="@FlatFXResources.Resources.SmplTradeOrderSubmit" class="btn btn-primary" />
                        <br />
                        <remark>@FlatFXResources.Resources.SmplTradeOrderTheFundsMust @DateTime.Now.AddDays(1).ToShortDateString() @FlatFXResources.Resources.At 13:00</remark>
                    }
                </div>
            </div>
        }
    </div>
</div>

<script>
    function setBuySellText(text) {
        $('#buySellText').html(text);
    }
</script>